{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getUsers","fetch","then","response","json","users","data","TodoList","todos","selectUser","nameFilter","completedFilter","className","type","placeholder","onChange","event","target","value","map","todo","classNames","TodoList__item","completed","key","id","readOnly","title","onClick","userId","CurrentUser","state","user","setState","find","usr","props","this","name","email","phone","clearSelectedUser","React","Component","App","prepearedTodos","selectedUserId","input","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"8VASO,SAASA,IACd,OAAOC,MATM,wCAUVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIA,EAAMC,Q,0BCPZC,EAAW,SAAC,GAAD,IACtBC,EADsB,EACtBA,MACAC,EAFsB,EAEtBA,WACAC,EAHsB,EAGtBA,WACAC,EAJsB,EAItBA,gBAJsB,OAMtB,yBAAKC,UAAU,YACb,sCACA,2BACEC,KAAK,OACLC,YAAY,SACZC,SAAU,SAAAC,GAAK,OAAIN,EAAWM,EAAMC,OAAOC,UAE7C,4BAAQH,SAAU,SAAAC,GAAK,OAAIL,EAAgBK,EAAMC,OAAOC,SACtD,uCACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,gBAAd,kBAGF,yBAAKN,UAAU,4BAEb,wBAAIA,UAAU,kBACXJ,EAAMW,KAAI,SAAAC,GAAI,OAEb,wBACER,UAAWS,IAAW,CACpBC,gBAAgB,EAChB,0BAA2BF,EAAKG,UAChC,6BAA8BH,EAAKG,YAErCC,IAAKJ,EAAKK,IAEV,+BACE,2BACEZ,KAAK,WACLa,UAAQ,IAEV,2BAAIN,EAAKO,QAGX,4BACEf,UAAU,iEAKVC,KAAK,SACLe,QAAS,kBAAMnB,EAAWW,EAAKS,UAPjC,QAUG,IACAT,EAAKS,gBCnDPC,G,MAAb,4MACEC,MAAQ,CACNC,KAAM,IAFV,kEAKuB,IAAD,OAClBhC,IACGE,MAAK,SAAAG,GAAK,OAAI,EAAK4B,SAAS,CAC3BD,KAAM3B,EAAM6B,MAAK,SAAAC,GAAG,OAAIA,EAAIV,KAAO,EAAKW,MAAMP,iBARtD,2CAYwB,IAAD,OACfQ,KAAKD,MAAMP,SAAWQ,KAAKN,MAAMC,KAAKP,IACxCzB,IACGE,MAAK,SAAAG,GAAK,OAAI,EAAK4B,SAAS,CAC3BD,KAAM3B,EAAM6B,MAAK,SAAAC,GAAG,OAAIA,EAAIV,KAAO,EAAKW,MAAMP,iBAhBxD,+BAqBY,IAAD,EAC4BQ,KAAKN,MAAMC,KAAtCP,EADD,EACCA,GAAIa,EADL,EACKA,KAAMC,EADX,EACWA,MAAOC,EADlB,EACkBA,MACjBC,EAAsBJ,KAAKD,MAA3BK,kBAER,OACE,yBAAK7B,UAAU,eACb,wBAAIA,UAAU,sBACZ,iDAEGa,IAGL,wBAAIb,UAAU,qBAAqB0B,GACnC,uBAAG1B,UAAU,sBAAsB2B,GACnC,uBAAG3B,UAAU,sBAAsB4B,GACnC,4BACE3B,KAAK,SACLe,QAASa,GAFX,cApCR,GAAiCC,IAAMC,YC2FxBC,E,4MAvFbb,MAAQ,CACNvB,MAAO,GACPqC,eAAgB,GAChBC,eAAgB,G,EAWlBpC,WAAa,SAACqC,GACZ,EAAKd,UAAS,SAAAF,GAAK,MAAK,CACtBvB,MAAO,YAAIuB,EAAMc,gBAAgBG,QAAO,SAAA5B,GAAI,OAAKA,EAAKO,MAClDP,EAAKO,MAAMsB,SAASF,GACpB,W,EAIRpC,gBAAkB,SAACoC,GACjB,OAAQA,GACN,IAAK,YACH,EAAKd,UAAS,SAAAF,GAAK,MAAK,CACtBvB,MAAO,YAAIuB,EAAMc,gBAAgBG,QAAO,SAAA5B,GAAI,OAAIA,EAAKG,iBAEvD,MAEF,IAAK,eACH,EAAKU,UAAS,SAAAF,GAAK,MAAK,CACtBvB,MAAO,YAAIuB,EAAMc,gBAAgBG,QAAO,SAAA5B,GAAI,OAAKA,EAAKG,iBAExD,MAEF,QACE,EAAKU,UAAS,SAAAF,GAAK,MAAK,CACtBvB,MAAM,YAAKuB,EAAMc,sB,EAMzBpC,WAAa,SAACoB,GACRA,IAAW,EAAKE,MAAMe,gBAI1B,EAAKb,SAAS,CACZa,eAAgBjB,K,EAIpBY,kBAAoB,WAClB,EAAKR,SAAS,CAAEa,eAAgB,K,kEAjDb,IAAD,OHXb7C,MAJM,wCAKVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAM,GAAK,OAAIA,EAAMF,QGWlBJ,MAAK,SAAAM,GAAK,OAAI,EAAKyB,SAAS,CAC3BzB,MAAOA,EAAMwC,QAAO,SAAA5B,GAAI,OAAIA,EAAKO,SACjCkB,eAAgBrC,S,+BAgDZ,IAAD,EAC2B6B,KAAKN,MAA/BvB,EADD,EACCA,MAAOsC,EADR,EACQA,eAEf,OACE,yBAAKlC,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEJ,MAAOA,EACPE,WAAY2B,KAAK3B,WACjBC,gBAAiB0B,KAAK1B,gBACtBF,WAAY4B,KAAK5B,cAIrB,yBAAKG,UAAU,gBACb,yBAAKA,UAAU,0BACZkC,EACC,kBAAC,EAAD,CACEjB,OAAQiB,EACRL,kBAAmBJ,KAAKI,oBAExB,0B,GAhFEC,IAAMC,WCJxBO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.57134dfd.chunk.js","sourcesContent":["const API_TODOS = `https://mate-api.herokuapp.com/todos`;\nconst API_USERS = `https://mate-api.herokuapp.com/users`;\n\nexport function getTodos() {\n  return fetch(API_TODOS)\n    .then(response => response.json())\n    .then(todos => todos.data);\n}\n\nexport function getUsers() {\n  return fetch(API_USERS)\n    .then(response => response.json())\n    .then(users => users.data);\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  nameFilter,\n  completedFilter,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <input\n      type=\"text\"\n      placeholder=\"filter\"\n      onChange={event => nameFilter(event.target.value)}\n    />\n    <select onChange={event => completedFilter(event.target.value)}>\n      <option>All</option>\n      <option value=\"completed\">Completed</option>\n      <option value=\"notCompleted\">Not completed</option>\n    </select>\n\n    <div className=\"TodoList__list-container\">\n\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n\n          <li\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--checked': todo.completed,\n              'TodoList__item--unchecked': !todo.completed,\n            })}\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              user:\n              {' '}\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  nameFilter: PropTypes.func.isRequired,\n  completedFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUsers()\n      .then(users => this.setState({\n        user: users.find(usr => usr.id === this.props.userId),\n      }));\n  }\n\n  componentDidUpdate() {\n    if (this.props.userId !== this.state.user.id) {\n      getUsers()\n        .then(users => this.setState({\n          user: users.find(usr => usr.id === this.props.userId),\n        }));\n    }\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user: #\n            {id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          onClick={clearSelectedUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    prepearedTodos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        todos: todos.filter(todo => todo.title),\n        prepearedTodos: todos,\n      }));\n  }\n\n  nameFilter = (input) => {\n    this.setState(state => ({\n      todos: [...state.prepearedTodos].filter(todo => (todo.title\n        ? todo.title.includes(input)\n        : '')),\n    }));\n  }\n\n  completedFilter = (input) => {\n    switch (input) {\n      case 'completed':\n        this.setState(state => ({\n          todos: [...state.prepearedTodos].filter(todo => todo.completed),\n        }));\n        break;\n\n      case 'notCompleted':\n        this.setState(state => ({\n          todos: [...state.prepearedTodos].filter(todo => !todo.completed),\n        }));\n        break;\n\n      default:\n        this.setState(state => ({\n          todos: [...state.prepearedTodos],\n        }));\n        break;\n    }\n  }\n\n  selectUser = (userId) => {\n    if (userId === this.state.selectedUserId) {\n      return;\n    }\n\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            nameFilter={this.nameFilter}\n            completedFilter={this.completedFilter}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}